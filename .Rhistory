k_matrix
k_matrix = t(k_matrix)
k_matrix
k_matrix = as.integer(k_matrix)
k_matrix
k_matrix = t(enes$kmatrix)
k_matrix
class(k_matrix) <- "integer"
k_matrix
k_matrix <- JuliaObject(k_matrix)
k_matrix
nsize
julia_assign("nsize", nsize)
julia_assign("alpha_vec", alpha_vec)
julia_assign("k_matrix", k_matrix)
julia_assign("proba_nom", proba_nom)
julia_eval("proba_nom = string(proba_nom)")
burnin <- format(burnin, scientific = F)
niter <- format(niter, scientific = F)
julia_assign("niter", niter)
julia_assign("burnin", burnin)
julia_assign("nchains", nchains)
# Aquí solo le estás diciendo "oye guardame en sim el método multinomial_cero con estas variables"
julia_eval(paste0("sim       = multinomial_cero(",nsize,",",alpha_vec,",", k_matrix, ")"))
# Aquí es cuando ya corres las simulaciones como lo hice yo
julia_eval(paste0("hmcsample = sample(sim, HMC(0.01, 5), MCMCThreads(), burnin = ",
burnin, ", ", niter, ", ", nchains, ")"))
# Función para calcular las n's para una probabilidad multinomial condicionada a una binomial
# ej P(Ocupacion)
# donde t ~ Binomial(nsize, q) con q ~ Beta(alpha_q, beta_q)
# y     k ~ Multinomial(nsize, p) y p ~ Dirichlet(alpha_vec)
# Nota: le subi el default de iteraciones por experiencia pasada
calculo_multinomial_1 <- function(nsize, tsize, alpha_vec = NULL, k_matrix,
mu_q = 0.5, sigma_q = 1/12,
delta = 1, gamma = 1,
compilar_julia = T,
burnin = 50000, niter = 100000, nchains = 4,
proba_nom = str_remove(as.character(runif(1)),"\\.")){
# Carga los metodos que tiene que cargar
if (compilar_julia){
julia_eval('include("functions/Model/multinomial_uno.jl")')
julia_eval('include("functions/Model/calculo_xy.jl")')
julia_eval('include("functions/Model/check_convergencia.jl")')
}
if (is.null(alpha_vec)){
alpha_vec <- rep(1, ncol(k_matrix))
} else {
alpha_vec <- check_sum(alpha_vec)
}
nsize <- as.integer(nsize)
tsize <- as.integer(tsize)
class(k_matrix) <- "integer"
alpha_vec <- JuliaObject(alpha_vec)
k_matrix <- JuliaObject(k_matrix)
julia_assign("nsize", nsize)
julia_assign("tsize", tsize)
julia_assign("alpha_vec", alpha_vec)
julia_assign("k_matrix", k_matrix)
# Calculo de x_q, y_q
julia_assign("mu_q", mu_q)
julia_assign("sigma_q", sigma_q)
x_q <- julia_eval("x_q = calculo_xy(mu_q, sigma_q)[1]")
y_q <- julia_eval("y_q = calculo_xy(mu_q, sigma_q)[2]")
julia_assign("proba_nom", proba_nom)
julia_eval("proba_nom = string(proba_nom)")
burnin <- format(burnin, scientific = F)
niter <- format(niter, scientific = F)
julia_assign("niter", niter)
julia_assign("burnin", burnin)
julia_assign("nchains", nchains)
# Aquí solo le estás diciendo "oye guardame en sim el método multinomial_cero con estas variables"
julia_eval(paste0("sim       = multinomial_uno(",nsize,",", tsize,"," ,k_matrix,",",
alpha_vec,",", x_q, ",", y_q, ", ", delta, ", ", gamma,  ")"))
# Aquí es cuando ya corres las simulaciones como lo hice yo
julia_eval(paste0("hmcsample = sample(sim, HMC(0.01, 5), MCMCThreads(), burnin = ",
burnin, ", ", niter, ", ", nchains, ")"))
# En caso de no convergencia:
# Paso 1. Checar que tus n's estén bien (neta, checalo)
# Paso 2. Aumentar el número de iteraciones
# Paso 3. Si solamente falla la estacionariedad, checa las gráficas y ve donde está fallando
julia_eval(paste0("check_convergencia(hmcsample, ", niter, ", ", burnin, ", ", nchains, ", proba_nom)"))
# guardamos muestras como DataFrame
muestras <- julia_eval("DataFrame(hmcsample)")
# creamos un tibble auxiliar y lo modificamos
aux <- as_tibble(muestras) %>%
select(starts_with("q")) %>%
purrr::modify(., ~ ajuste_sens(., delta, gamma))
# guardamos los nombres y modificamos
nombres <- colnames(aux)
nombres <- str_replace(nombres, "q", "ajus_q")
colnames(aux) <- nombres
#Bindeamos todo
muestras <- cbind(muestras, aux)
return(muestras)
}
nsize <- c(165, 902, 473)
tsize <- c(40, 264, 181)
k_matrix <- matrix(c(17, 13, 10, 65, 67, 132, 42, 69, 70))
k_matrix
k_matrix <- matrix(c(17, 13, 10, 65, 67, 132, 42, 69, 70), nrow = 3)
k_matrix
k_matrix <- matrix(c(17, 13, 10, 65, 67, 132, 42, 69, 70), nrow = 3, byrow = T)
k_matrix
calculo_multinomial_1(nsize, tsize, alpha_vec = NULL, k_matrix)
# Carga los metodos que tiene que cargar
if (compilar_julia){
julia_eval('include("functions/Model/multinomial_uno.jl")')
julia_eval('include("functions/Model/calculo_xy.jl")')
julia_eval('include("functions/Model/check_convergencia.jl")')
}
if (is.null(alpha_vec)){
alpha_vec <- rep(1, ncol(k_matrix))
} else {
alpha_vec <- check_sum(alpha_vec)
}
nsize <- as.integer(nsize)
tsize <- as.integer(tsize)
class(k_matrix) <- "integer"
k_matrix
alpha_vec <- JuliaObject(alpha_vec)
k_matrix <- JuliaObject(k_matrix)
julia_assign("nsize", nsize)
julia_assign("tsize", tsize)
julia_assign("alpha_vec", alpha_vec)
julia_assign("k_matrix", k_matrix)
# Calculo de x_q, y_q
julia_assign("mu_q", mu_q)
mu_q = 0.5
sigma_q = 1/12
delta = 1
gamma = 1
# Calculo de x_q, y_q
julia_assign("mu_q", mu_q)
julia_assign("sigma_q", sigma_q)
x_q <- julia_eval("x_q = calculo_xy(mu_q, sigma_q)[1]")
y_q <- julia_eval("y_q = calculo_xy(mu_q, sigma_q)[2]")
julia_assign("proba_nom", proba_nom)
julia_eval("proba_nom = string(proba_nom)")
burnin <- format(burnin, scientific = F)
niter <- format(niter, scientific = F)
julia_assign("niter", niter)
julia_assign("burnin", burnin)
julia_assign("nchains", nchains)
# Aquí solo le estás diciendo "oye guardame en sim el método multinomial_cero con estas variables"
julia_eval(paste0("sim       = multinomial_uno(",nsize,",", tsize,"," ,k_matrix,",",
alpha_vec,",", x_q, ",", y_q, ", ", delta, ", ", gamma,  ")"))
# Aquí es cuando ya corres las simulaciones como lo hice yo
julia_eval(paste0("hmcsample = sample(sim, HMC(0.01, 5), MCMCThreads(), burnin = ",
burnin, ", ", niter, ", ", nchains, ")"))
# Aquí solo le estás diciendo "oye guardame en sim el método multinomial_cero con estas variables"
julia_eval(paste0("sim       = multinomial_uno(",nsize,",", tsize,"," ,k_matrix,",",
alpha_vec,",", x_q, ",", y_q, ", ", delta, ", ", gamma,  ")"))
# Carga los metodos que tiene que cargar
if (compilar_julia){
julia_eval('include("functions/Model/multinomial_uno.jl")')
julia_eval('include("functions/Model/calculo_xy.jl")')
julia_eval('include("functions/Model/check_convergencia.jl")')
}
# Aquí solo le estás diciendo "oye guardame en sim el método multinomial_cero con estas variables"
julia_eval(paste0("sim       = multinomial_uno(",nsize,",", tsize,"," ,k_matrix,",",
alpha_vec,",", x_q, ",", y_q, ", ", delta, ", ", gamma,  ")"))
paste0("sim       = multinomial_uno(",nsize,",", tsize,"," ,k_matrix,",",
alpha_vec,",", x_q, ",", y_q, ", ", delta, ", ", gamma,  ")")
nsize
nsize <- as.integer(nsize)
tsize <- as.integer(tsize)
class(k_matrix) <- "integer"
alpha_vec <- JuliaObject(alpha_vec)
k_matrix <- JuliaObject(k_matrix)
julia_assign("nsize", nsize)
julia_assign("tsize", tsize)
julia_assign("alpha_vec", alpha_vec)
julia_assign("k_matrix", k_matrix)
nsize
nsize <- c(165, 902, 473)
nsize <- as.integer(nsize)
tsize <- as.integer(tsize)
class(k_matrix) <- "integer"
alpha_vec <- JuliaObject(alpha_vec)
k_matrix <- JuliaObject(k_matrix)
julia_assign("nsize", nsize)
julia_assign("tsize", tsize)
julia_assign("alpha_vec", alpha_vec)
nsize
tsize
k_matrix
calculo_multinomial_1(nsize, tsize, k_matrix)
check_sum <- function(x){
suma = sum(x)
if (suma != 1){
x <- x / suma
}
return(x)
}
# Función para calcular las n's para una probabilidad multinomial condicionada a una binomial
# ej P(Ocupacion)
# donde t ~ Binomial(nsize, q) con q ~ Beta(alpha_q, beta_q)
# y     k ~ Multinomial(nsize, p) y p ~ Dirichlet(alpha_vec)
# Nota: le subi el default de iteraciones por experiencia pasada
calculo_multinomial_1 <- function(nsize, tsize, alpha_vec = NULL, k_matrix,
mu_q = 0.5, sigma_q = 1/12,
delta = 1, gamma = 1,
compilar_julia = T,
burnin = 50000, niter = 100000, nchains = 4,
proba_nom = str_remove(as.character(runif(1)),"\\.")){
# Carga los metodos que tiene que cargar
if (compilar_julia){
julia_eval('include("functions/Model/multinomial_uno.jl")')
julia_eval('include("functions/Model/calculo_xy.jl")')
julia_eval('include("functions/Model/check_convergencia.jl")')
}
if (is.null(alpha_vec)){
alpha_vec <- rep(1, ncol(k_matrix))
} else {
alpha_vec <- check_sum(alpha_vec)
}
nsize <- as.integer(nsize)
tsize <- as.integer(tsize)
class(k_matrix) <- "integer"
nsize <- JuliaObject(nsize)
tsize <- JuliaObject(tsize)
alpha_vec <- JuliaObject(alpha_vec)
k_matrix <- JuliaObject(k_matrix)
julia_assign("nsize", nsize)
julia_assign("tsize", tsize)
julia_assign("alpha_vec", alpha_vec)
julia_assign("k_matrix", k_matrix)
# Calculo de x_q, y_q
julia_assign("mu_q", mu_q)
julia_assign("sigma_q", sigma_q)
x_q <- julia_eval("x_q = calculo_xy(mu_q, sigma_q)[1]")
y_q <- julia_eval("y_q = calculo_xy(mu_q, sigma_q)[2]")
julia_assign("proba_nom", proba_nom)
julia_eval("proba_nom = string(proba_nom)")
burnin <- format(burnin, scientific = F)
niter <- format(niter, scientific = F)
julia_assign("niter", niter)
julia_assign("burnin", burnin)
julia_assign("nchains", nchains)
# Aquí solo le estás diciendo "oye guardame en sim el método multinomial_cero con estas variables"
julia_eval(paste0("sim       = multinomial_uno(",nsize,",", tsize,"," ,k_matrix,",",
alpha_vec,",", x_q, ",", y_q, ", ", delta, ", ", gamma,  ")"))
# Aquí es cuando ya corres las simulaciones como lo hice yo
julia_eval(paste0("hmcsample = sample(sim, HMC(0.01, 5), MCMCThreads(), burnin = ",
burnin, ", ", niter, ", ", nchains, ")"))
# En caso de no convergencia:
# Paso 1. Checar que tus n's estén bien (neta, checalo)
# Paso 2. Aumentar el número de iteraciones
# Paso 3. Si solamente falla la estacionariedad, checa las gráficas y ve donde está fallando
julia_eval(paste0("check_convergencia(hmcsample, ", niter, ", ", burnin, ", ", nchains, ", proba_nom)"))
# guardamos muestras como DataFrame
muestras <- julia_eval("DataFrame(hmcsample)")
# creamos un tibble auxiliar y lo modificamos
aux <- as_tibble(muestras) %>%
select(starts_with("q")) %>%
purrr::modify(., ~ ajuste_sens(., delta, gamma))
# guardamos los nombres y modificamos
nombres <- colnames(aux)
nombres <- str_replace(nombres, "q", "ajus_q")
colnames(aux) <- nombres
#Bindeamos todo
muestras <- cbind(muestras, aux)
return(muestras)
}
calculo_multinomial_1(nsize, tsize, k_matrix)
k_matrix <- matrix(c(17, 13, 10, 65, 67, 132, 42, 69, 70), byrow = T, nrow = 3)
k_matrix
calculo_multinomial_1(nsize, tsize, k_matrix)
k_matrix
class(k_matrix) <- "integer"
# Carga los metodos que tiene que cargar
if (compilar_julia){
julia_eval('include("functions/Model/multinomial_uno.jl")')
julia_eval('include("functions/Model/calculo_xy.jl")')
julia_eval('include("functions/Model/check_convergencia.jl")')
}
if (is.null(alpha_vec)){
alpha_vec <- rep(1, ncol(k_matrix))
} else {
alpha_vec <- check_sum(alpha_vec)
}
nsize <- as.integer(nsize)
tsize <- as.integer(tsize)
class(k_matrix) <- "integer"
nsize <- JuliaObject(nsize)
tsize <- JuliaObject(tsize)
alpha_vec <- JuliaObject(alpha_vec)
k_matrix <- JuliaObject(k_matrix)
julia_assign("nsize", nsize)
julia_assign("tsize", tsize)
julia_assign("alpha_vec", alpha_vec)
julia_assign("k_matrix", k_matrix)
# Calculo de x_q, y_q
julia_assign("mu_q", mu_q)
julia_assign("sigma_q", sigma_q)
x_q <- julia_eval("x_q = calculo_xy(mu_q, sigma_q)[1]")
y_q <- julia_eval("y_q = calculo_xy(mu_q, sigma_q)[2]")
julia_assign("proba_nom", proba_nom)
julia_eval("proba_nom = string(proba_nom)")
burnin <- format(burnin, scientific = F)
niter <- format(niter, scientific = F)
julia_assign("niter", niter)
julia_assign("burnin", burnin)
julia_assign("nchains", nchains)
# Aquí solo le estás diciendo "oye guardame en sim el método multinomial_cero con estas variables"
julia_eval(paste0("sim       = multinomial_uno(",nsize,",", tsize,"," ,k_matrix,",",
alpha_vec,",", x_q, ",", y_q, ", ", delta, ", ", gamma,  ")"))
# Aquí es cuando ya corres las simulaciones como lo hice yo
julia_eval(paste0("hmcsample = sample(sim, HMC(0.01, 5), MCMCThreads(), burnin = ",
burnin, ", ", niter, ", ", nchains, ")"))
k_matrix
nsize
tsize
paste0("sim       = multinomial_uno(",nsize,",", tsize,"," ,k_matrix,",",
alpha_vec,",", x_q, ",", y_q, ", ", delta, ", ", gamma,  ")")
alpha_vec
alpha_vec = NULL
if (is.null(alpha_vec)){
alpha_vec <- rep(1, ncol(k_matrix))
} else {
alpha_vec <- check_sum(alpha_vec)
}
alpha_vec
nsize <- as.integer(nsize)
tsize <- as.integer(tsize)
class(k_matrix) <- "integer"
nsize <- JuliaObject(nsize)
tsize <- JuliaObject(tsize)
alpha_vec <- JuliaObject(alpha_vec)
k_matrix <- JuliaObject(k_matrix)
julia_assign("nsize", nsize)
julia_assign("tsize", tsize)
julia_assign("alpha_vec", alpha_vec)
julia_assign("k_matrix", k_matrix)
# Calculo de x_q, y_q
julia_assign("mu_q", mu_q)
julia_assign("sigma_q", sigma_q)
x_q <- julia_eval("x_q = calculo_xy(mu_q, sigma_q)[1]")
y_q <- julia_eval("y_q = calculo_xy(mu_q, sigma_q)[2]")
julia_assign("proba_nom", proba_nom)
julia_eval("proba_nom = string(proba_nom)")
burnin <- format(burnin, scientific = F)
niter <- format(niter, scientific = F)
julia_assign("niter", niter)
julia_assign("burnin", burnin)
julia_assign("nchains", nchains)
# Aquí solo le estás diciendo "oye guardame en sim el método multinomial_cero con estas variables"
julia_eval(paste0("sim       = multinomial_uno(",nsize,",", tsize,"," ,k_matrix,",",
alpha_vec,",", x_q, ",", y_q, ", ", delta, ", ", gamma,  ")"))
# Aquí es cuando ya corres las simulaciones como lo hice yo
julia_eval(paste0("hmcsample = sample(sim, HMC(0.01, 5), MCMCThreads(), burnin = ",
burnin, ", ", niter, ", ", nchains, ")"))
nsize <- c(165, 902, 473)
tsize <- c(40, 264, 181)
k_matrix <- matrix(c(17, 13, 10, 65, 67, 132, 42, 69, 70), byrow = T, nrow = 3)
alpha_vec = NULL
mu_q = 0.5
sigma_q = 1/12
delta = 1
gamma = 1
# Carga los metodos que tiene que cargar
if (compilar_julia){
julia_eval('include("functions/Model/multinomial_uno.jl")')
julia_eval('include("functions/Model/calculo_xy.jl")')
julia_eval('include("functions/Model/check_convergencia.jl")')
}
if (is.null(alpha_vec)){
alpha_vec <- rep(1, ncol(k_matrix))
} else {
alpha_vec <- check_sum(alpha_vec)
}
nsize <- as.integer(nsize)
tsize <- as.integer(tsize)
class(k_matrix) <- "integer"
nsize <- JuliaObject(nsize)
tsize <- JuliaObject(tsize)
alpha_vec <- JuliaObject(alpha_vec)
k_matrix <- JuliaObject(k_matrix)
julia_assign("nsize", nsize)
julia_assign("tsize", tsize)
julia_assign("alpha_vec", alpha_vec)
julia_assign("k_matrix", k_matrix)
# Calculo de x_q, y_q
julia_assign("mu_q", mu_q)
julia_assign("sigma_q", sigma_q)
x_q <- julia_eval("x_q = calculo_xy(mu_q, sigma_q)[1]")
y_q <- julia_eval("y_q = calculo_xy(mu_q, sigma_q)[2]")
julia_assign("proba_nom", proba_nom)
julia_eval("proba_nom = string(proba_nom)")
burnin <- format(burnin, scientific = F)
niter <- format(niter, scientific = F)
julia_assign("niter", niter)
julia_assign("burnin", burnin)
julia_assign("nchains", nchains)
# Aquí solo le estás diciendo "oye guardame en sim el método multinomial_cero con estas variables"
julia_eval(paste0("sim       = multinomial_uno(",nsize,",", tsize,"," ,k_matrix,",",
alpha_vec,",", x_q, ",", y_q, ", ", delta, ", ", gamma,  ")"))
# Aquí es cuando ya corres las simulaciones como lo hice yo
julia_eval(paste0("hmcsample = sample(sim, HMC(0.01, 5), MCMCThreads(), burnin = ",
burnin, ", ", niter, ", ", nchains, ")"))
nsize <- c(165, 902, 473)
tsize <- c(40, 264, 181)
k_matrix <- matrix(c(17, 13, 10, 65, 67, 132, 42, 69, 70), byrow = T, nrow = 3)
calculo_multinomial_1(nsize, tsize, alpha_vec = NULL, k_matrix )
#función para hacer el ajuste de sensitividad y especificidad
ajuste_sens <- function(x, delta = 1, gamma = 1){
return(delta*x + (1 - gamma)*(1 - x))
}
nsize <- c(165, 902, 473)
tsize <- c(40, 264, 181)
k_matrix <- matrix(c(17, 13, 10, 65, 67, 132, 42, 69, 70), byrow = T, nrow = 3)
calculo_multinomial_1(nsize, tsize, alpha_vec = NULL, k_matrix )
zsize <- c(100, 200, 300)
x_p_gamma = 1/3
y_p_gamma = 0
compilar_julia = T
# Carga los metodos que tiene que cargar
if (compilar_julia){
julia_eval('include("functions/Model/gammapoissoncero.jl")')
julia_eval('include("functions/Model/check_convergencia.jl")')
}
zsize <- as.integer(zsize)
zsize <- JuliaObject(zsize) #OJO AQUI, tiene que decir "Julia Object of type Array{Float64,1}"
zsize
julia_assign("zsize", zsize)
# Calculo de x_p_gamma, y_p_gamma
julia_assign("x_p_gamma", x_p_gamma)
julia_assign("y_p_gamma", y_p_gamma)
julia_assign("proba_nom", proba_nom)
julia_eval("proba_nom = string(proba_nom)")
burnin <- format(burnin, scientific = F)
niter <- format(niter, scientific = F)
julia_assign("niter", niter)
julia_assign("burnin", burnin)
julia_assign("nchains", nchains)
# Aquí solo le estás diciendo "oye guardame en sim el método multinomial_cero con estas variables"
julia_eval(paste0("sim       = gammapoissoncero(",zsize,",",x_p_gamma,",", y_p_gamma, ")"))
# Aquí es cuando ya corres las simulaciones como lo hice yo
julia_eval(paste0("hmcsample = sample(sim, HMC(0.01, 5), MCMCThreads(), burnin = ",
burnin, ", ", niter, ", ", nchains, ")"))
k <- matrix(c(1,2,3,5,4,5,6,9,8,9,10,11), nrow = 3, byrow=T)
k
alpha = 1
beta = 1
tau = 1
mu = 0
# Carga los metodos que tiene que cargar
if (compilar_julia){
julia_eval('include("functions/Model/lognormal.jl")')
julia_eval('include("functions/Model/check_convergencia.jl")')
}
k <- matrix(c(1,2,3,5,4,5,6,9,8,9,10,11), nrow = 3, byrow=T)
class(k) <- "integer"
k <- JuliaObject(k)
k
julia_assign("k", k)
# Asigacion de parametros
julia_assign("alpha", alpha)
julia_assign("beta", beta)
julia_assign("tau", tau)
julia_assign("mu", mu)
julia_assign("proba_nom", proba_nom)
julia_eval("proba_nom = string(proba_nom)")
burnin <- format(burnin, scientific = F)
niter <- format(niter, scientific = F)
julia_assign("niter", niter)
julia_assign("burnin", burnin)
julia_assign("nchains", nchains)
# Aquí solo le estás diciendo "oye guardame en sim el método multinomial_cero con estas variables"
julia_eval(paste0("sim       = lognormal(",k,",",alpha,",", beta, ",",
tau,",", mu,")"))
# Aquí es cuando ya corres las simulaciones como lo hice yo
julia_eval(paste0("hmcsample = sample(sim, HMC(0.01, 5), MCMCThreads(), burnin = ",
burnin, ", ", niter, ", ", nchains, ")"))
paste0("sim       = lognormal(",k,",",alpha,",", beta, ",",
lambda,")")
lambda = 1
paste0("sim       = lognormal(",k,",",alpha,",", beta, ",",
lambda,")")
# Carga los metodos que tiene que cargar
if (compilar_julia){
julia_eval('include("functions/Model/lognormal.jl")')
julia_eval('include("functions/Model/check_convergencia.jl")')
}
class(k) <- "integer"
k <- JuliaObject(k)
k_matrix <- matrix(c(17, 13, 10, 65, 67, 132, 42, 69, 70), byrow = T, nrow = 3)
class(k) <- "integer"
k <- matrix(c(17, 13, 10, 65, 67, 132, 42, 69, 70), byrow = T, nrow = 3)
class(k) <- "integer"
k <- JuliaObject(k)
julia_assign("k", k)
# Asigacion de parametros
julia_assign("alpha", alpha)
julia_assign("beta", beta)
julia_assign("lambda", lambda)
julia_assign("proba_nom", proba_nom)
julia_eval("proba_nom = string(proba_nom)")
burnin <- format(burnin, scientific = F)
niter <- format(niter, scientific = F)
julia_assign("niter", niter)
julia_assign("burnin", burnin)
julia_assign("nchains", nchains)
# Aquí solo le estás diciendo "oye guardame en sim el método multinomial_cero con estas variables"
julia_eval(paste0("sim       = lognormal(",k,",",alpha,",", beta, ",",
lambda,")"))
# Aquí es cuando ya corres las simulaciones como lo hice yo
julia_eval(paste0("hmcsample = sample(sim, HMC(0.01, 5), MCMCThreads(), burnin = ",
burnin, ", ", niter, ", ", nchains, ")"))
citation(package = "JuliaCall")
citation(R)
citation()
